
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Opc.Ua.Server;
using Opc.Ua;
using System.Security.Cryptography;

namespace OPCDemo.References
{
    static class Clients
    {
        private static List<Client> clients_;
        private static Dictionary<ClientToken, NodeId> token_connection_;
        private static Dictionary<NodeId, Client> connection_client_;
        public static List<Client> clients
        {
            get
            {
                if (clients_ == null)
                    clients_ = new List<Client>();
                return clients_;
            }
        }

        public static void addClient(Client c)
        {
            if (clients_.Contains(c))
            {
                throw new Exception("Client already exists");
            }
            clients_.Add(c);
        }
    }
    class Client
    {
        private ClientToken token;
        private Node RootObject;
        private ClientConnection Connection;
        public bool isRootset
        {
            get
            {
                if (ObjectRoot == null)
                {
                    return false;
                }
                return true;
            }
            private set
            {
                
            }
        }
        public Client(object identifier,NodeId session)
        {
            token = new ClientToken(identifier);
            Connection = new ClientConnection(session);

        }
        public Client(ClientToken identifier, NodeId session)
        {
            token = identifier;
            Connection = new ClientConnection(session);
        }
        public void setRootObject(Node objroot)
        {
            if (!isRootset)
                throw new Exception("Object-Root-Node already setted");
            RootObject = objroot;
        }
        
    }
    /// <summary>
    /// represent the authentification of a Client by a Token generated by an identifier Object
    /// </summary>
    public class ClientToken
    {
        public object identifier;
        public byte[] hash;
        public ClientToken(object ident)
        {
            byte[] obj = ASCIIEncoding.ASCII.GetBytes(ident.ToString());
            hash =new MD5CryptoServiceProvider().ComputeHash(obj);
        }
    }
    /// <summary>
    /// represent a Connection /Session to a client by the NodeId
    /// </summary>
    public class ClientConnection
    {
        public NodeId connectionID;
        int SessionID;
        public ClientConnection(NodeId connection)
        {
            if (connection.Identifier.GetType() != typeof(int))
                throw new Exception("bad Session Node");

            this.connectionID= connection;
        }
        public void renew(NodeId newCon)
        {
            connectionID = newCon;
        }
        public 

    }
}
